{
  "Software Engineering": [
    {
      "id": "se-01",
      "title": "Step 1 : Programming Language Fundamentals",
      "shortDescription": "Grasp the basics of one language (JS/Java/Python) and core syntax.",
      "detailedContent": "Start with a single language and build confidence. Learn variables, data types, operators, conditionals, loops, functions/methods, input/output, and basic debugging. Understand how code runs (compiler/interpreter) and practice writing small programs (e.g., FizzBuzz, factorial, string reversals). Focus on clean naming and reading error messages.",
      "status": "none"
    },
    {
      "id": "se-02",
      "title": "Step 2 : Data Structures and Algorithms",
      "shortDescription": "Learn arrays, linked lists, stacks, queues, hash maps, trees, graphs.",
      "detailedContent": "Master the building blocks for efficient problem solving. Cover arrays and strings, linked lists, stacks and queues, hash maps/sets, trees (BST, traversal), and graphs (BFS/DFS). Learn sorting (quick/merge) and searching (binary search). Practice time/space complexity (Big-O) and common patterns like two pointers, sliding window, recursion, and dynamic programming. Use visualizations and implement from scratch to build intuition.",
      "status": "none"
    },
    {
      "id": "se-03",
      "title": "Step 3 : Intermediate Problem Solving",
      "shortDescription": "Apply DS&A to real questions and practice interview-style problems.",
      "detailedContent": "Bridge theory to practice with curated problems. Solve category-based sets (arrays, strings, hash maps, trees, graphs, DP). For each problem, write: problem restatement, examples, approach, complexity, and test cases. Track mistakes and revisit. Use platforms like LeetCode/CodeStudio. Aim for consistency (30â€“60 minutes daily) over perfection. Include pair-programming or discussing solutions aloud to build communication skills.",
      "status": "none"
    },
    {
      "id": "se-04",
      "title": "Step 4 : Master Advanced DSA : Advanced DSA 1 Month",
      "shortDescription": "Tries, advanced DP, graphs, string matching; push edge-case mastery.",
      "detailedContent": "Tackle advanced topics: tries (prefix trees), advanced dynamic programming (state compression, paths), and deeper graph problems (topological sort, shortest paths). Strengthen string pattern matching (KMP, Rabin-Karp). Practice math-heavy problems when relevant. Keep a cheat sheet of patterns. Work on time-bound practice rounds to simulate interviews.",
      "status": "none"
    },
    {
      "id": "se-05",
      "title": "Step 5 : Learn SQL",
      "shortDescription": "Understand relational databases, CRUD, joins, indexing, and transactions.",
      "detailedContent": "Learn the relational model, schema design basics, and key SQL operations: SELECT, INSERT, UPDATE, DELETE. Practice joins (inner/left/right), aggregations (GROUP BY, HAVING), subqueries, views, and transactions (ACID). Understand indexing and when to use it. Do mini-projects like sales analytics or user activity reports to connect SQL to real use cases.",
      "status": "none"
    },
    {
      "id": "se-06",
      "title": "Step 6 : Learn Backend",
      "shortDescription": "Software design principles, backend architecture, testing, deployment.",
      "detailedContent": "Master essential backend topics. Software Design: SOLID, common design patterns, UML diagrams, schema and API design. Architecture: how the internet works (TCP/UDP/HTTP), MVC, LLD case studies, authentication/authorization, logging, error handling. Tooling: unit testing, ORMs, Git workflows, CI/CD basics, and deployment strategies (containers, cloud). Choose one stack (e.g., Node + Express, Java + Spring Boot) and ship a small API with tests.",
      "status": "none"
    },
    {
      "id": "se-07",
      "title": "Step 7 : Learn Fullstack",
      "shortDescription": "HTML, CSS, JavaScript, React/Redux; build and deploy end-to-end.",
      "detailedContent": "Front-end foundations: semantic HTML, modern CSS (Flexbox/Grid), responsive design, and accessibility. JavaScript: ES6+, DOM manipulation, events, async/await. Frameworks: React fundamentals (components, state/props, hooks), basic Redux/RTK. System understanding: how browsers, HTTP, and APIs interact. Build a small full-stack app (auth, CRUD, pagination) and deploy it. Include tests, linting, and meaningful docs.",
      "status": "none"
    },
    {
      "id": "se-08",
      "title": "Step 8 : Master High Level Design",
      "shortDescription": "Design scalable systems: caching, CAP, microservices, case studies.",
      "detailedContent": "Learn HLD essentials: scalability, reliability, and consistency trade-offs. Cover consistent hashing, caching strategies (client/server-side, CDN, Redis), CAP theorem, and SQL vs NoSQL choices. Study distributed systems components (queues, streams) and do case studies like URL shortener, news feed, chat, or ride sharing. Communicate designs with clear diagrams and capacity planning.",
      "status": "none"
    },
    {
      "id": "se-09",
      "title": "Step 9 : Learn Data Engineering",
      "shortDescription": "Pipelines, big data tooling, advanced SQL, warehousing, orchestration.",
      "detailedContent": "Understand the data lifecycle: ingestion, processing, storage, and serving. Learn advanced SQL, ETL/ELT, batch vs stream processing, and tools (e.g., Spark, Kafka, Airflow). Explore cloud services (AWS/GCP) and warehousing (BigQuery/Redshift). Build a mini pipeline (extract -> transform -> dashboard). Add logging/monitoring and document SLAs.",
      "status": "none"
    },
    {
      "id": "se-10",
      "title": "Step 10 : Product Management for Engineers",
      "shortDescription": "Product thinking, analytics, roadmaps, and delivery for engineers.",
      "detailedContent": "Develop product sense: define user problems, success metrics, and experiment plans. Learn prioritization frameworks (RICE/MoSCoW), analytics (funnels, retention, Mixpanel), and roadmap planning. Do hands-on case studies and collaborate across functions. Apply PM principles to your engineering projects to ship the right things effectively.",
      "status": "none"
    },
    {
      "id": "se-11",
      "title": "Step 11 : Learn Gen AI for Software Engineers",
      "shortDescription": "LLMs, RAG, agents; build production-ready AI features.",
      "detailedContent": "Get oriented with AI/ML and deep learning basics. Learn LLM concepts (tokenization, transformers), embeddings, RAG (retrieval-augmented generation), and evaluation. Explore AI agents for workflows. Build a small GenAI feature (e.g., smart search or summarization) and focus on safety, observability, and cost. Document limitations and monitoring plans.",
      "status": "none"
    }
  ],
  "Data Science": [
    {
      "id": "ds-01",
      "title": "Python for Data Science",
      "shortDescription": "NumPy, Pandas, visualization",
      "detailedContent": "Load and clean data with Pandas, compute with NumPy, visualize with Matplotlib/Seaborn, notebooks best practices and storytelling.",
      "status": "none"
    },
    {
      "id": "ds-02",
      "title": "ML Fundamentals",
      "shortDescription": "Modeling and evaluation",
      "detailedContent": "Supervised vs unsupervised learning, feature engineering, model selection, cross-validation, metrics (precision/recall/ROC-AUC), bias-variance tradeoff.",
      "status": "none"
    }
  ],
  "Data Analytics": [
    {
      "id": "da-01",
      "title": "SQL & BI Dashboards",
      "shortDescription": "Transform data into insights",
      "detailedContent": "Write complex SQL (joins, windows), build dashboards in Tableau/Power BI, design KPIs and tell data stories with clear visual choices.",
      "status": "none"
    },
    {
        "id": "da-02",
        "title": "SQ & BI Dashboards",
        "shortDescription": "Transform data into insights",
        "detailedContent": "Write complex SQL (joins, windows), build dashboards in Tableau/Power BI, design KPIs and tell data stories with clear visual choices.",
        "status": "none"
      }
  ],
  "DevOps & Cloud Computing": [
    {
      "id": "devops-01",
      "title": "Cloud Foundations",
      "shortDescription": "Compute, storage, networking",
      "detailedContent": "Identity and access management, VPC networking, load balancers, autoscaling, managed databases, cost and security basics across AWS/Azure/GCP.",
      "status": "none"
    },
    {
      "id": "devops-02",
      "title": "Containers & Kubernetes",
      "shortDescription": "Packaging and orchestration",
      "detailedContent": "Docker images, registries, Kubernetes primitives (Pods, Deployments, Services, Ingress), Helm charts, observability, rolling/blue-green deployments.",
      "status": "none"
    }
  ],
  "Advanced AI & ML": [
    {
      "id": "aiml-01",
      "title": "Deep Learning Basics",
      "shortDescription": "Neural nets and training",
      "detailedContent": "Architectures (MLP, CNN, RNN), activation functions, loss, optimizers, regularization, overfitting control, training workflows with PyTorch/TensorFlow.",
      "status": "none"
    },
    {
      "id": "aiml-02",
      "title": "LLMs & Prompting",
      "shortDescription": "Use and fine-tune LLMs",
      "detailedContent": "Prompt engineering, embeddings, retrieval augmented generation, fine-tuning basics, evaluation and safety considerations.",
      "status": "none"
    }
  ]
}
